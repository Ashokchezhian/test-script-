version: 2.1

jobs:
  list-1password-vaults:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Add 1Password CLI Repository
          command: |
            echo https://downloads.1password.com/linux/alpinelinux/stable/ >> /etc/apk/repositories
            wget https://downloads.1password.com/linux/keys/alpinelinux/support@1password.com-61ddfc31.rsa.pub -P /etc/apk/keys
            apk update
      # ... (rest of the steps)

  build_and_check:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Google Cloud SDK
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk
      - run:
          name: Authenticate with Google Cloud
          command: |
            file_path=$(pwd)
            echo "Current Directory: $file_path"
            echo "Content of service-account.json:"
            cat $file_path/service-account.json
            echo "Setting GOOGLE_APPLICATION_CREDENTIALS..."
            echo "export GOOGLE_APPLICATION_CREDENTIALS=$file_path/service-account.json" >> $BASH_ENV
            echo "Activating service account..."
            gcloud auth activate-service-account --key-file=$file_path/service-account.json
            echo "Checking authentication list..."
            gcloud auth list
            cat $BASH_ENV
      # ... (rest of the steps)

  check_application:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Print Environment Variables
          command: |
            printenv
      - run:
          name: Install Google Cloud SDK
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get install google-cloud-sdk
      - run:
          name: Authenticate with Google Cloud
          command: |
            file_path=$(pwd)
            echo "Current Directory: $file_path"
            echo "Content of service-account.json:"
            cat $file_path/service-account.json
            echo "Setting GOOGLE_APPLICATION_CREDENTIALS..."
            echo "export GOOGLE_APPLICATION_CREDENTIALS=$file_path/service-account.json" >> $BASH_ENV
            echo "Activating service account..."
            gcloud auth activate-service-account --key-file=$file_path/service-account.json
            echo "Checking authentication list..."
            gcloud auth list
            cat $BASH_ENV
            
      # ... (rest of the steps)

  notify-slack:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: Get Artifact Link
          command: |
            ARTIFACT_LINK="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_ID}/artifacts/0/artifacts/feature-overview.html"
            echo "Artifact Link: $ARTIFACT_LINK"
      - run:
          name: Notify Slack with Artifact Link
          command: |
            curl -X POST \
              -H "Content-type: application/json" \
              --data '{"text":"Hello from CircleCI cron job! Build succeeded. Artifact report: <'"$ARTIFACT_LINK"'|View Report>"}' \
              $SLACK_WEBHOOK_URL

workflows:
  version: 2
  build:
    jobs:
      - list-1password-vaults:
          context: 1pass_cred
      - build_and_check:
          requires:
            - "list-1password-vaults"
      - check_application:
          requires:
            - build_and_check
      - notify-slack:
          requires:
            - check_application
